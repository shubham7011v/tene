plugins {
    id "com.android.application"
    id "kotlin-android"
    id "com.google.gms.google-services"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterRoot = localProperties.getProperty('flutter.sdk')
if (flutterRoot == null) {
    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

// Check if environment flag is set (dev or prod)
def dartEnvironmentVariables = project.property('dart-defines')?.split(',')
def environment = 'dev' // Default to dev

if (dartEnvironmentVariables != null) {
    dartEnvironmentVariables.each { def dartDefine ->
        if (dartDefine.startsWith('ENV=')) {
            environment = dartDefine.substring('ENV='.length())
        }
    }
}

android {
    namespace "com.example.tene"
    compileSdk 35
    ndkVersion '26.1.10909125'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11
    }

    kotlinOptions {
        jvmTarget = '11'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        
        // Use different google-services.json files for different environments
        if (environment == 'prod') {
            // If using a dedicated prod directory
            prod.java.srcDirs += ['src/prod/java']
            prod.assets.srcDirs += ['src/prod/assets']
        }
    }

    defaultConfig {
        applicationId "com.example.tene"
        // Ensure minSdkVersion is at least 19 for Google Sign-In
        minSdkVersion Math.max(flutter.minSdkVersion.toInteger(), 19)
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName
        // Add multidex support
        multiDexEnabled true
    }

    // Add debug signing config to ensure consistent SHA-1 during development
    signingConfigs {
        debug {
            // Use the default debug keystore location
            // This will be the same keystore that all Flutter debug builds use
            // No need to specify path - the Android Gradle plugin knows where it is
        }
    }

    flavorDimensions "environment"
    productFlavors {
        dev {
            dimension "environment"
            resValue "string", "app_name", "Tene Dev"
            versionNameSuffix "-dev"
        }
        prod {
            dimension "environment"
            resValue "string", "app_name", "Tene"
        }
    }

    buildTypes {
        debug {
            // Use the debug signing config to ensure consistent SHA-1
            signingConfig signingConfigs.debug
        }
        release {
            signingConfig signingConfigs.debug
        }
    }
}

flutter {
    source '../..'
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation platform('com.google.firebase:firebase-bom:32.7.2')
    implementation 'com.google.firebase:firebase-analytics'
    // Add explicit Google Play Services Auth dependency for Sign-In
    implementation 'com.google.android.gms:play-services-auth:20.7.0'
} 